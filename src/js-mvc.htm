<!DOCTYPE html>
 <html>
 <head>
     <meta charset="UTF-8">
     <title>JS MVC ES6</title>
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css">
     
 </head>
 <body class="container-fluid">
    controller
    <pre>class NegociacaoController{
    
    constructor(){
        this._data = new Date('2020-02-20');
        this._quantidade = 1;
        this._valor = 2.2;
    }

    adiciona(event){
        event.preventDefault(); 

        let negociacao = new Negociacao(
            this._data,
            this._quantidade,
            this._valor);
        console.log(negociacao) //--{"_data":"2020-02-20","_quantidade":1,"_valor":2.2}
    }
}

var controller = new NegociacaoController();
controller.adiciona(ev);</pre>
<hr>

comunicação entre Html form com o objeto NegociacaoController
<pre>&lt;script src=&quot;js/app/models/Negociacao.js&quot;&gt;&lt;/script&gt; 
&lt;script src=&quot;js/app/controllers/NegociacaoController.js&quot;&gt;&lt;/script&gt;
    
&lt;script&gt;let negociacaoController = new NegociacaoController();&lt;/script&gt;

&lt;form class="form"  onSubmit="negociacaoController.adiciona(event)"
</pre>
<hr>

collections (ListModel)
<pre>class ListaNegociacoes{
    constructor(){
        this._negociacoes = [];
    }

    adiciona(negociacao){
        this._negociacoes.push(negociacao);
    }

    get negociacoes(){
        //--defesa.3
        //return this._negociacoes;
        return [].concat(this._negociacoes);
    }
}

let listaNegociacoes = new ListaNegociacoes();
let lista = listaNegociacoes.adiciona(negociacao);</pre>
<hr>

controller, jquery, collection, private
<pre>class NegociacaoController{
    
    constructor(){
        let $ = document.querySelector.bind(document);

        this._data = $('#data');        
        this._quantidade = $('#quantidade');
        this._valor = $('#valor');

        this._listaNegociacoes = new ListaNegociacoes();
    }

    adiciona(event){
        event.preventDefault();  

        let negociacao = this._criaNegociacao();
        this._listaNegociacoes.adiciona(negociacao);
    }

    _criaNegociacao(){
        let dataFormatada = DateHelper.textoParaData(this._data.value);  
        let obj = new Negociacao(
            dataFormatada,
            this._quantidade.value,
            this._valor.value);
        return obj;
    }
}</pre>
<hr>

view
<pre>class NegociacoesView{
    template(){
        return "bloco de html";
    }
}

let negociacoesView = new NegociacoesView();
negociacoes.template()</pre>
<hr>

comunicação (bind) entre Html div com o objeto NegociacaoView<br>
html
<pre>&lt;div id='negociacoesView'&gt;&lt;/div&gt;</pre>
controller
<pre>class NegociacaoController{
    
    constructor(){        
        let $ = document.querySelector.bind(document);

        this._data = $('#data');        
        this._quantidade = $('#quantidade');
        this._valor = $('#valor');

        this._listaNegociacoes = new ListaNegociacoes();

        this._negociacoesView = new NegociacoesView($('#negociacoesView'));
        this._negociacoesView.update();
    }

    adiciona(event){}
    _criaNegociacao(){}
}</pre>
view com responsabilidade
<pre>class NegociacoesView{

    constructor(elemento){
        this._elemento = elemento;
    }

    _template(){
        return `&lt;b&gt;bloco de html&lt;/b&gt; NegocicoesView() para Html div `;
    }

    update(){
        this._elemento.innerHTML = this._template();
    }
}</pre>
<input type="hidden" id="data" value="2020-10-20">
<input type="hidden" id="quantidade" value="5">
<input type="hidden" id="valor" value="2.2">
<div id='negociacoesView'>oi</div>
<hr>

controller populando view
<pre>this._listaNegociacoes = new ListaNegociacoes();
this._negociacoesView = new NegociacoesView($('#negociacoesView'));
this._negociacoesView.update(this._listaNegociacoes);</pre>
view dinamica
<pre>_template(model){
    return `&lt;table class=&quot;table table-bordered&quot;&gt; 
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th&gt;DATA&lt;/th&gt; &lt;th&gt;QUANTIDADE&lt;/th&gt; &lt;th&gt;VALOR&lt;/th&gt; &lt;th&gt;VOLUME&lt;/th&gt; 
        &lt;/tr&gt; 
    &lt;/thead&gt; 
    &lt;tbody&gt; 
        ${model.negociacoes.map( n =&gt; { 
            return `&lt;tr&gt; 
                &lt;td&gt;${DateHelper.dataParaTexto(n.data)}&lt;/td&gt; 
                &lt;td&gt;${n.quantidade}&lt;/td&gt; 
                &lt;td&gt;${n.valor}&lt;/td&gt; 
                &lt;td&gt;${n.obterVolume()}&lt;/td&gt; &lt;/tr&gt;` 
        }).join('')}
    &lt;/tbody&gt; 
&lt;/table&gt;`;
}

update(model){
    this._elemento.innerHTML = this._template(model);
}</pre>

</body>
<script src="js/app/helpers/DateHelper.js"></script>
<script src="js/app/models/Negociacao.js"></script>
<script src="js/app/controllers/NegociacaoController.js"></script>
<script src="js/app/models/ListaNegociacoes.js"></script>
<script src="js/app/views/NegociacoesView.js"></script>
    <script>
        //sem evento do form, manter instancia da Controller
        var evt = new Event("nome");

        var controller = new NegociacaoController();
        controller.InicializaSeletores();
        controller.adiciona(evt);

        /* let lista = new NegociacoesView();
        console.log('view:'+lista.template()) */
    </script>
 </html>